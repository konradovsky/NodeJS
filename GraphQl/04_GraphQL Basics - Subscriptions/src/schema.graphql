    type Query {
        users(query:String): [User!]!
        posts(query:String): [Post!]!
        comments(query:String): [Comment!]!
    }
    type Mutation {
        createUser(data: CreateUserInput!): User!
        deleteUser(id: ID!): User!
        updateUser(id: ID!, data: UpdateUserInput!): User!

        createPost(data: CreatePostInput!): Post!
        deletePost(id: ID!): Post!
        updatePost(id: ID!, data: UpdatePostInput!): Post!

        createComment(data: CreateCommentInput!): Comment!
        deleteComment(id: ID!): Comment!
        updateComment(id: ID!, data: UpdateCommentInput!): Comment!
    }
    type Subscription {
        count: Int!
        comment(postId: ID!): Comment!
        post: Post!
    }
    input CreateUserInput {
        name: String!, 
        email: String!, 
        age: Int
    }
    input UpdateUserInput {
        name: String, 
        email: String, 
        age: Int
    }
    input CreatePostInput {
        title: String!, 
        body: String!, 
        published: Boolean!, 
        author: String!
    }
    input UpdatePostInput {
        title: String, 
        body: String, 
        published: Boolean
    }
    input CreateCommentInput {
        text: String!, 
        author: String!, 
        post: String!
    }
    input UpdateCommentInput {
        text: String, 
    }
    type Comment {
        id: ID!
        author: User!
        text: String!
        post: Post!
    }
    type User {
        id: ID!
        name: String!
        email: String!
        age: Int
        posts: [Post!]!
        comments: [Comment!]!
    }
    type Post {
        id: ID!
        title: String!
        body: String!
        published: Boolean!
        author: User!
        comments: [Comment!]!
    }